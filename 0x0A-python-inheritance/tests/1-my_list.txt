The module to test ``1-my_list.py``
=================================

Using ``MyList``
----------------

This file is considerd in reStructuredText format.
First import ``MyList`` from the ``1-my_list.py`` module:
    >>> MyList = __import__('1-my_list').MyList

Normal test:
    >>> my_list = MyList()
    >>> isinstance(my_list, list)
    True
    >>> my_list.append(1)
    >>> my_list.append(4)
    >>> my_list.append(2)
    >>> my_list.append(3)
    >>> my_list.append(5)
    >>> print(my_list)
    [1, 4, 2, 3, 5]
    >>> my_list.print_sorted()
    [1, 2, 3, 4, 5]
    >>> print(my_list)
    [1, 4, 2, 3, 5]

Test None:
    >>> my_list.clear()
    >>> my_list.append(None)
    >>> my_list.append(1)
    >>> my_list.print_sorted()
    Traceback (most recent call last):
    TypeError: '<' not supported between instances of 'int' and 'NoneType'
    
Test None:
    >>> my_list.clear()
    >>> my_list.append(1)
    >>> my_list.append(None)
    >>> my_list.print_sorted()
    Traceback (most recent call last):
    TypeError: '<' not supported between instances of 'NoneType' and 'int'

Test Negative value:
   >>> my_list.clear()
   >>> my_list.append(-1)
   >>> my_list.append(-2)
   >>> my_list.append(3)
   >>> my_list.print_sorted()
   [-2, -1, 3]

Test Null:
   >>> my_list.append(NULL)
   Traceback (most recent call last):
   NameError: name 'NULL' is not defined

Test empty list:
   >>> my_list.clear()
   >>> my_list.print_sorted()
   []

Test same numbeR:
   >>> my_list.clear()
   >>> my_list.append(3)
   >>> my_list.append(3)
   >>> my_list.append(3)
   >>> my_list.append(3)
   >>> my_list.print_sorted()
   [3, 3, 3, 3]

Test same numbeR with other numers:
   >>> my_list.append(2)
   >>> my_list.append(-1)
   >>> my_list.print_sorted()
   [-1, 2, 3, 3, 3, 3]


Test infinite:
   >>> my_list.append(int('inf'))
   Traceback (most recent call last):
   ValueError: invalid literal for int() with base 10: 'inf'

Test maximun num:
   >>> my_list.clear()
   >>> my_list.append(10000000000000000000000000000000000000000000)
   >>> my_list.append(1)
   >>> my_list.print_sorted()
   [1, 10000000000000000000000000000000000000000000]

Test string:
   >>> my_list.clear()
   >>> my_list.append(1)
   >>> my_list.append("hello")
   >>> my_list.print_sorted()
   Traceback (most recent call last):
   TypeError: '<' not supported between instances of 'str' and 'int'

Test 0 value:
   >>> my_list.clear()
   >>> my_list.append(1)
   >>> my_list.append(0)
   >>> my_list.print_sorted()
   [0, 1]

Test one number:
   >>> my_list.clear()
   >>> my_list.append(1)
   >>> my_list.print_sorted()
   [1]


Test list as an argument:
  >>> my_list.clear()
  >>> b = [1, 2, 3]
  >>> my_list = MyList(b)
  >>> my_list.print_sorted()
  [1, 2, 3]

Test undefined:
  >>> my_listf.print_sorted()
  Traceback (most recent call last):
  NameError: name 'my_listf' is not defined

Test parent object:
  >>> my_list = [1, 2, 3]
  >>> my_list.print_sorted()
  Traceback (most recent call last):
  AttributeError: 'list' object has no attribute 'print_sorted'


